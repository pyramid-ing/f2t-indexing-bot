# 프론트엔드 구조 가이드

## 디렉토리 구조 및 용도

### 1. API 레이어 (`apiClient/`)
- `apiClient.ts`: 기본 API 클라이언트 설정 및 인터셉터
- 도메인별 API 클라이언트 분리 (예: `bloggerApi.ts`, `settingsApi.ts`)
- 모든 백엔드 통신은 반드시 API 클라이언트를 통해 수행
- API 에러 처리는 `errorHelpers.ts`에서 중앙 관리

### 2. 상태 관리 (`atoms/`)
- 전역 상태 관리를 위한 Recoil atoms 정의
- 도메인별로 파일 분리
- 상태 의존성이 명확해야 함

### 3. 컴포넌트 (`components/`)
- `shared/`: 재사용 가능한 공통 컴포넌트
- 특정 기능에 종속된 컴포넌트는 해당 기능명의 디렉토리에 배치
  예: `ThumbnailEditor/` - 썸네일 편집 관련 컴포넌트

### 4. 기능 모듈 (`features/`)
- 주요 기능별로 디렉토리 분리
- 각 기능은 독립적으로 동작 가능해야 함
- 구조 예시:
  ```
  features/
  ├── dashboard/        # 대시보드 관련 기능
  ├── settings/         # 설정 관련 기능
  └── work-management/  # 작업 관리 기능
  ```

### 5. 레이아웃 (`layouts/`)
- 전역 레이아웃 컴포넌트 관리
- `AppLayout.tsx`: 기본 레이아웃 구조
- `AppHeader.tsx`, `AppSidebar.tsx`: 공통 UI 요소

### 6. 페이지 (`pages/`)
- 라우팅 가능한 최상위 컴포넌트
- 페이지별로 단일 파일
- 비즈니스 로직은 최소화하고 features의 컴포넌트 조합에 집중

### 7. 타입 정의 (`types/`)
- 전역적으로 사용되는 타입 정의
- 도메인별 타입은 해당 기능 디렉토리 내에 위치

### 8. 유틸리티 (`utils/`)
- 순수 함수 및 헬퍼 함수
- 도메인에 종속되지 않는 범용 유틸리티

## 코드 작성 규칙

1. 컴포넌트 분리 기준
   - 단일 책임 원칙 준수
   - 재사용 가능성이 높은 UI는 shared로 분리
   - 특정 기능에 종속된 컴포넌트는 해당 feature 내부에 위치

2. 상태 관리
   - 전역 상태는 atoms에서 관리
   - 컴포넌트 내부 상태는 최대한 지역적으로 유지
   - Props drilling 피하기

3. API 통신
   - API 호출은 반드시 apiClient/ 디렉토리의 클라이언트 사용
   - 에러 처리는 errorHelpers.ts 활용
   - 데이터 캐싱 고려
description:
globs:
alwaysApply: false
---
